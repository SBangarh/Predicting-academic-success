{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":73290,"databundleVersionId":8710574,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-25T17:29:24.557033Z","iopub.execute_input":"2024-06-25T17:29:24.557473Z","iopub.status.idle":"2024-06-25T17:29:25.694416Z","shell.execute_reply.started":"2024-06-25T17:29:24.557439Z","shell.execute_reply":"2024-06-25T17:29:25.693002Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e6/sample_submission.csv\n/kaggle/input/playground-series-s4e6/train.csv\n/kaggle/input/playground-series-s4e6/test.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Load Data\nand overview","metadata":{}},{"cell_type":"code","source":"#load\ndata = pd.read_csv('/kaggle/input/playground-series-s4e6/train.csv')\n\ndata.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-24T22:48:22.001113Z","iopub.execute_input":"2024-06-24T22:48:22.001750Z","iopub.status.idle":"2024-06-24T22:48:22.635581Z","shell.execute_reply.started":"2024-06-24T22:48:22.001610Z","shell.execute_reply":"2024-06-24T22:48:22.634165Z"},"trusted":true},"execution_count":2,"outputs":[{"execution_count":2,"output_type":"execute_result","data":{"text/plain":"   id  Marital status  Application mode  Application order  Course  \\\n0   0               1                 1                  1    9238   \n1   1               1                17                  1    9238   \n2   2               1                17                  2    9254   \n3   3               1                 1                  3    9500   \n4   4               1                 1                  2    9500   \n\n   Daytime/evening attendance  Previous qualification  \\\n0                           1                       1   \n1                           1                       1   \n2                           1                       1   \n3                           1                       1   \n4                           1                       1   \n\n   Previous qualification (grade)  Nacionality  Mother's qualification  ...  \\\n0                           126.0            1                       1  ...   \n1                           125.0            1                      19  ...   \n2                           137.0            1                       3  ...   \n3                           131.0            1                      19  ...   \n4                           132.0            1                      19  ...   \n\n   Curricular units 2nd sem (credited)  Curricular units 2nd sem (enrolled)  \\\n0                                    0                                    6   \n1                                    0                                    6   \n2                                    0                                    6   \n3                                    0                                    8   \n4                                    0                                    7   \n\n   Curricular units 2nd sem (evaluations)  \\\n0                                       7   \n1                                       9   \n2                                       0   \n3                                      11   \n4                                      12   \n\n   Curricular units 2nd sem (approved)  Curricular units 2nd sem (grade)  \\\n0                                    6                         12.428571   \n1                                    0                          0.000000   \n2                                    0                          0.000000   \n3                                    7                         12.820000   \n4                                    6                         12.933333   \n\n   Curricular units 2nd sem (without evaluations)  Unemployment rate  \\\n0                                               0               11.1   \n1                                               0               11.1   \n2                                               0               16.2   \n3                                               0               11.1   \n4                                               0                7.6   \n\n   Inflation rate   GDP    Target  \n0             0.6  2.02  Graduate  \n1             0.6  2.02   Dropout  \n2             0.3 -0.92   Dropout  \n3             0.6  2.02  Enrolled  \n4             2.6  0.32  Graduate  \n\n[5 rows x 38 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Marital status</th>\n      <th>Application mode</th>\n      <th>Application order</th>\n      <th>Course</th>\n      <th>Daytime/evening attendance</th>\n      <th>Previous qualification</th>\n      <th>Previous qualification (grade)</th>\n      <th>Nacionality</th>\n      <th>Mother's qualification</th>\n      <th>...</th>\n      <th>Curricular units 2nd sem (credited)</th>\n      <th>Curricular units 2nd sem (enrolled)</th>\n      <th>Curricular units 2nd sem (evaluations)</th>\n      <th>Curricular units 2nd sem (approved)</th>\n      <th>Curricular units 2nd sem (grade)</th>\n      <th>Curricular units 2nd sem (without evaluations)</th>\n      <th>Unemployment rate</th>\n      <th>Inflation rate</th>\n      <th>GDP</th>\n      <th>Target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>9238</td>\n      <td>1</td>\n      <td>1</td>\n      <td>126.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>6</td>\n      <td>7</td>\n      <td>6</td>\n      <td>12.428571</td>\n      <td>0</td>\n      <td>11.1</td>\n      <td>0.6</td>\n      <td>2.02</td>\n      <td>Graduate</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>1</td>\n      <td>17</td>\n      <td>1</td>\n      <td>9238</td>\n      <td>1</td>\n      <td>1</td>\n      <td>125.0</td>\n      <td>1</td>\n      <td>19</td>\n      <td>...</td>\n      <td>0</td>\n      <td>6</td>\n      <td>9</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0</td>\n      <td>11.1</td>\n      <td>0.6</td>\n      <td>2.02</td>\n      <td>Dropout</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>1</td>\n      <td>17</td>\n      <td>2</td>\n      <td>9254</td>\n      <td>1</td>\n      <td>1</td>\n      <td>137.0</td>\n      <td>1</td>\n      <td>3</td>\n      <td>...</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0</td>\n      <td>16.2</td>\n      <td>0.3</td>\n      <td>-0.92</td>\n      <td>Dropout</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>9500</td>\n      <td>1</td>\n      <td>1</td>\n      <td>131.0</td>\n      <td>1</td>\n      <td>19</td>\n      <td>...</td>\n      <td>0</td>\n      <td>8</td>\n      <td>11</td>\n      <td>7</td>\n      <td>12.820000</td>\n      <td>0</td>\n      <td>11.1</td>\n      <td>0.6</td>\n      <td>2.02</td>\n      <td>Enrolled</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>9500</td>\n      <td>1</td>\n      <td>1</td>\n      <td>132.0</td>\n      <td>1</td>\n      <td>19</td>\n      <td>...</td>\n      <td>0</td>\n      <td>7</td>\n      <td>12</td>\n      <td>6</td>\n      <td>12.933333</td>\n      <td>0</td>\n      <td>7.6</td>\n      <td>2.6</td>\n      <td>0.32</td>\n      <td>Graduate</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 38 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"#check dtypes \ndata.info()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T22:33:11.809133Z","iopub.execute_input":"2024-06-14T22:33:11.809551Z","iopub.status.idle":"2024-06-14T22:33:11.848301Z","shell.execute_reply.started":"2024-06-14T22:33:11.809520Z","shell.execute_reply":"2024-06-14T22:33:11.846802Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 76518 entries, 0 to 76517\nData columns (total 38 columns):\n #   Column                                          Non-Null Count  Dtype  \n---  ------                                          --------------  -----  \n 0   id                                              76518 non-null  int64  \n 1   Marital status                                  76518 non-null  int64  \n 2   Application mode                                76518 non-null  int64  \n 3   Application order                               76518 non-null  int64  \n 4   Course                                          76518 non-null  int64  \n 5   Daytime/evening attendance                      76518 non-null  int64  \n 6   Previous qualification                          76518 non-null  int64  \n 7   Previous qualification (grade)                  76518 non-null  float64\n 8   Nacionality                                     76518 non-null  int64  \n 9   Mother's qualification                          76518 non-null  int64  \n 10  Father's qualification                          76518 non-null  int64  \n 11  Mother's occupation                             76518 non-null  int64  \n 12  Father's occupation                             76518 non-null  int64  \n 13  Admission grade                                 76518 non-null  float64\n 14  Displaced                                       76518 non-null  int64  \n 15  Educational special needs                       76518 non-null  int64  \n 16  Debtor                                          76518 non-null  int64  \n 17  Tuition fees up to date                         76518 non-null  int64  \n 18  Gender                                          76518 non-null  int64  \n 19  Scholarship holder                              76518 non-null  int64  \n 20  Age at enrollment                               76518 non-null  int64  \n 21  International                                   76518 non-null  int64  \n 22  Curricular units 1st sem (credited)             76518 non-null  int64  \n 23  Curricular units 1st sem (enrolled)             76518 non-null  int64  \n 24  Curricular units 1st sem (evaluations)          76518 non-null  int64  \n 25  Curricular units 1st sem (approved)             76518 non-null  int64  \n 26  Curricular units 1st sem (grade)                76518 non-null  float64\n 27  Curricular units 1st sem (without evaluations)  76518 non-null  int64  \n 28  Curricular units 2nd sem (credited)             76518 non-null  int64  \n 29  Curricular units 2nd sem (enrolled)             76518 non-null  int64  \n 30  Curricular units 2nd sem (evaluations)          76518 non-null  int64  \n 31  Curricular units 2nd sem (approved)             76518 non-null  int64  \n 32  Curricular units 2nd sem (grade)                76518 non-null  float64\n 33  Curricular units 2nd sem (without evaluations)  76518 non-null  int64  \n 34  Unemployment rate                               76518 non-null  float64\n 35  Inflation rate                                  76518 non-null  float64\n 36  GDP                                             76518 non-null  float64\n 37  Target                                          76518 non-null  object \ndtypes: float64(7), int64(30), object(1)\nmemory usage: 22.2+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"#check nulls\ndata.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T22:33:19.190577Z","iopub.execute_input":"2024-06-14T22:33:19.190949Z","iopub.status.idle":"2024-06-14T22:33:19.208853Z","shell.execute_reply.started":"2024-06-14T22:33:19.190920Z","shell.execute_reply":"2024-06-14T22:33:19.207518Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"id                                                0\nMarital status                                    0\nApplication mode                                  0\nApplication order                                 0\nCourse                                            0\nDaytime/evening attendance                        0\nPrevious qualification                            0\nPrevious qualification (grade)                    0\nNacionality                                       0\nMother's qualification                            0\nFather's qualification                            0\nMother's occupation                               0\nFather's occupation                               0\nAdmission grade                                   0\nDisplaced                                         0\nEducational special needs                         0\nDebtor                                            0\nTuition fees up to date                           0\nGender                                            0\nScholarship holder                                0\nAge at enrollment                                 0\nInternational                                     0\nCurricular units 1st sem (credited)               0\nCurricular units 1st sem (enrolled)               0\nCurricular units 1st sem (evaluations)            0\nCurricular units 1st sem (approved)               0\nCurricular units 1st sem (grade)                  0\nCurricular units 1st sem (without evaluations)    0\nCurricular units 2nd sem (credited)               0\nCurricular units 2nd sem (enrolled)               0\nCurricular units 2nd sem (evaluations)            0\nCurricular units 2nd sem (approved)               0\nCurricular units 2nd sem (grade)                  0\nCurricular units 2nd sem (without evaluations)    0\nUnemployment rate                                 0\nInflation rate                                    0\nGDP                                               0\nTarget                                            0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"#unique values\ndata.nunique()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T22:42:03.966164Z","iopub.execute_input":"2024-06-14T22:42:03.967115Z","iopub.status.idle":"2024-06-14T22:42:04.008067Z","shell.execute_reply.started":"2024-06-14T22:42:03.967078Z","shell.execute_reply":"2024-06-14T22:42:04.006839Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"id                                                76518\nMarital status                                        6\nApplication mode                                     22\nApplication order                                     8\nCourse                                               19\nDaytime/evening attendance                            2\nPrevious qualification                               21\nPrevious qualification (grade)                      110\nNacionality                                          18\nMother's qualification                               35\nFather's qualification                               39\nMother's occupation                                  40\nFather's occupation                                  56\nAdmission grade                                     668\nDisplaced                                             2\nEducational special needs                             2\nDebtor                                                2\nTuition fees up to date                               2\nGender                                                2\nScholarship holder                                    2\nAge at enrollment                                    46\nInternational                                         2\nCurricular units 1st sem (credited)                  21\nCurricular units 1st sem (enrolled)                  24\nCurricular units 1st sem (evaluations)               36\nCurricular units 1st sem (approved)                  23\nCurricular units 1st sem (grade)                   1206\nCurricular units 1st sem (without evaluations)       12\nCurricular units 2nd sem (credited)                  20\nCurricular units 2nd sem (enrolled)                  22\nCurricular units 2nd sem (evaluations)               31\nCurricular units 2nd sem (approved)                  21\nCurricular units 2nd sem (grade)                   1234\nCurricular units 2nd sem (without evaluations)       11\nUnemployment rate                                    11\nInflation rate                                       13\nGDP                                                  11\nTarget                                                3\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"#check dups\ndata.duplicated().sum()","metadata":{"execution":{"iopub.status.busy":"2024-06-14T22:33:28.848595Z","iopub.execute_input":"2024-06-14T22:33:28.849034Z","iopub.status.idle":"2024-06-14T22:33:28.917992Z","shell.execute_reply.started":"2024-06-14T22:33:28.848998Z","shell.execute_reply":"2024-06-14T22:33:28.916283Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"0"},"metadata":{}}]},{"cell_type":"markdown","source":"No nulls or duplicates. 37 features with 76518 instances. dtypes are ints and floats which makes it interesting as I need to figure out what the values in certain features indicate. For instance, Marital status has 6 unique values and I do not know what they indicate. This will be fun...crying","metadata":{}},{"cell_type":"markdown","source":"# Exploratory Analysis","metadata":{}},{"cell_type":"code","source":"# make copy and drop id\ncopy = data.copy()\ncopy = copy.drop('id', axis=1)\n\n#get column names\ncopy.columns","metadata":{"execution":{"iopub.status.busy":"2024-06-23T20:51:16.169002Z","iopub.execute_input":"2024-06-23T20:51:16.169427Z","iopub.status.idle":"2024-06-23T20:51:16.197485Z","shell.execute_reply.started":"2024-06-23T20:51:16.169392Z","shell.execute_reply":"2024-06-23T20:51:16.196271Z"},"trusted":true},"execution_count":3,"outputs":[{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"Index(['Marital status', 'Application mode', 'Application order', 'Course',\n       'Daytime/evening attendance', 'Previous qualification',\n       'Previous qualification (grade)', 'Nacionality',\n       'Mother's qualification', 'Father's qualification',\n       'Mother's occupation', 'Father's occupation', 'Admission grade',\n       'Displaced', 'Educational special needs', 'Debtor',\n       'Tuition fees up to date', 'Gender', 'Scholarship holder',\n       'Age at enrollment', 'International',\n       'Curricular units 1st sem (credited)',\n       'Curricular units 1st sem (enrolled)',\n       'Curricular units 1st sem (evaluations)',\n       'Curricular units 1st sem (approved)',\n       'Curricular units 1st sem (grade)',\n       'Curricular units 1st sem (without evaluations)',\n       'Curricular units 2nd sem (credited)',\n       'Curricular units 2nd sem (enrolled)',\n       'Curricular units 2nd sem (evaluations)',\n       'Curricular units 2nd sem (approved)',\n       'Curricular units 2nd sem (grade)',\n       'Curricular units 2nd sem (without evaluations)', 'Unemployment rate',\n       'Inflation rate', 'GDP', 'Target'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"#check sample again\ncopy.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-18T20:57:13.724735Z","iopub.execute_input":"2024-06-18T20:57:13.725159Z","iopub.status.idle":"2024-06-18T20:57:13.752273Z","shell.execute_reply.started":"2024-06-18T20:57:13.725125Z","shell.execute_reply":"2024-06-18T20:57:13.750824Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"   Marital status  Application mode  Application order  Course  \\\n0               1                 1                  1    9238   \n1               1                17                  1    9238   \n2               1                17                  2    9254   \n3               1                 1                  3    9500   \n4               1                 1                  2    9500   \n\n   Daytime/evening attendance  Previous qualification  \\\n0                           1                       1   \n1                           1                       1   \n2                           1                       1   \n3                           1                       1   \n4                           1                       1   \n\n   Previous qualification (grade)  Nacionality  Mother's qualification  \\\n0                           126.0            1                       1   \n1                           125.0            1                      19   \n2                           137.0            1                       3   \n3                           131.0            1                      19   \n4                           132.0            1                      19   \n\n   Father's qualification  ...  Curricular units 2nd sem (credited)  \\\n0                      19  ...                                    0   \n1                      19  ...                                    0   \n2                      19  ...                                    0   \n3                       3  ...                                    0   \n4                      37  ...                                    0   \n\n   Curricular units 2nd sem (enrolled)  \\\n0                                    6   \n1                                    6   \n2                                    6   \n3                                    8   \n4                                    7   \n\n   Curricular units 2nd sem (evaluations)  \\\n0                                       7   \n1                                       9   \n2                                       0   \n3                                      11   \n4                                      12   \n\n   Curricular units 2nd sem (approved)  Curricular units 2nd sem (grade)  \\\n0                                    6                         12.428571   \n1                                    0                          0.000000   \n2                                    0                          0.000000   \n3                                    7                         12.820000   \n4                                    6                         12.933333   \n\n   Curricular units 2nd sem (without evaluations)  Unemployment rate  \\\n0                                               0               11.1   \n1                                               0               11.1   \n2                                               0               16.2   \n3                                               0               11.1   \n4                                               0                7.6   \n\n   Inflation rate   GDP    Target  \n0             0.6  2.02  Graduate  \n1             0.6  2.02   Dropout  \n2             0.3 -0.92   Dropout  \n3             0.6  2.02  Enrolled  \n4             2.6  0.32  Graduate  \n\n[5 rows x 37 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Marital status</th>\n      <th>Application mode</th>\n      <th>Application order</th>\n      <th>Course</th>\n      <th>Daytime/evening attendance</th>\n      <th>Previous qualification</th>\n      <th>Previous qualification (grade)</th>\n      <th>Nacionality</th>\n      <th>Mother's qualification</th>\n      <th>Father's qualification</th>\n      <th>...</th>\n      <th>Curricular units 2nd sem (credited)</th>\n      <th>Curricular units 2nd sem (enrolled)</th>\n      <th>Curricular units 2nd sem (evaluations)</th>\n      <th>Curricular units 2nd sem (approved)</th>\n      <th>Curricular units 2nd sem (grade)</th>\n      <th>Curricular units 2nd sem (without evaluations)</th>\n      <th>Unemployment rate</th>\n      <th>Inflation rate</th>\n      <th>GDP</th>\n      <th>Target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>9238</td>\n      <td>1</td>\n      <td>1</td>\n      <td>126.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>19</td>\n      <td>...</td>\n      <td>0</td>\n      <td>6</td>\n      <td>7</td>\n      <td>6</td>\n      <td>12.428571</td>\n      <td>0</td>\n      <td>11.1</td>\n      <td>0.6</td>\n      <td>2.02</td>\n      <td>Graduate</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>17</td>\n      <td>1</td>\n      <td>9238</td>\n      <td>1</td>\n      <td>1</td>\n      <td>125.0</td>\n      <td>1</td>\n      <td>19</td>\n      <td>19</td>\n      <td>...</td>\n      <td>0</td>\n      <td>6</td>\n      <td>9</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0</td>\n      <td>11.1</td>\n      <td>0.6</td>\n      <td>2.02</td>\n      <td>Dropout</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1</td>\n      <td>17</td>\n      <td>2</td>\n      <td>9254</td>\n      <td>1</td>\n      <td>1</td>\n      <td>137.0</td>\n      <td>1</td>\n      <td>3</td>\n      <td>19</td>\n      <td>...</td>\n      <td>0</td>\n      <td>6</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0</td>\n      <td>16.2</td>\n      <td>0.3</td>\n      <td>-0.92</td>\n      <td>Dropout</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1</td>\n      <td>1</td>\n      <td>3</td>\n      <td>9500</td>\n      <td>1</td>\n      <td>1</td>\n      <td>131.0</td>\n      <td>1</td>\n      <td>19</td>\n      <td>3</td>\n      <td>...</td>\n      <td>0</td>\n      <td>8</td>\n      <td>11</td>\n      <td>7</td>\n      <td>12.820000</td>\n      <td>0</td>\n      <td>11.1</td>\n      <td>0.6</td>\n      <td>2.02</td>\n      <td>Enrolled</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1</td>\n      <td>1</td>\n      <td>2</td>\n      <td>9500</td>\n      <td>1</td>\n      <td>1</td>\n      <td>132.0</td>\n      <td>1</td>\n      <td>19</td>\n      <td>37</td>\n      <td>...</td>\n      <td>0</td>\n      <td>7</td>\n      <td>12</td>\n      <td>6</td>\n      <td>12.933333</td>\n      <td>0</td>\n      <td>7.6</td>\n      <td>2.6</td>\n      <td>0.32</td>\n      <td>Graduate</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 37 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"Some of these features and values are opaque. There is [documentation](https://archive.ics.uci.edu/dataset/697/predict+students+dropout+and+academic+success) available, but I am going to assume only student and education specific features are relevant and drop the others for now. I will use the student/education specific features to develop a model then add features to ideally improve the model.","metadata":{}},{"cell_type":"code","source":"#histograms and boxplot function\ndef plot_histograms(dataframe, features, num_rows, num_cols, figsize):\n    fig, axs = plt.subplots(nrows=num_rows, ncols=num_cols, figsize=figsize)\n    for i in range(num_rows):\n        for j in range(num_cols):\n            idx = i * num_cols + j\n            feature = features[idx]\n            axs[i, j].hist(dataframe[feature])\n            axs[i, j].set_title(feature)\n    plt.show()\n    \ndef plot_boxplots(dataframe, features, num_rows, num_cols, figsize):\n    fig, axs = plt.subplots(nrows=num_rows, ncols=num_cols, figsize=figsize)\n    for i in range(num_rows):\n        for j in range(num_cols):\n            idx = i * num_cols + j\n            feature = features[idx]\n            axs[i, j].boxplot(dataframe[feature])\n            axs[i, j].set_title(feature)\n    plt.show()","metadata":{"execution":{"iopub.status.busy":"2024-06-20T21:46:57.701789Z","iopub.execute_input":"2024-06-20T21:46:57.702172Z","iopub.status.idle":"2024-06-20T21:46:57.710461Z","shell.execute_reply.started":"2024-06-20T21:46:57.702142Z","shell.execute_reply":"2024-06-20T21:46:57.709351Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"markdown","source":"# Modelling","metadata":{}},{"cell_type":"code","source":"#make copy and drop id; no dups\ncopy = data.drop('id', axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T22:48:57.695959Z","iopub.execute_input":"2024-06-24T22:48:57.696466Z","iopub.status.idle":"2024-06-24T22:48:57.724795Z","shell.execute_reply.started":"2024-06-24T22:48:57.696422Z","shell.execute_reply":"2024-06-24T22:48:57.723180Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"# import libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, FunctionTransformer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.decomposition import PCA\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.pipeline import Pipeline\n","metadata":{"execution":{"iopub.status.busy":"2024-06-24T22:49:11.194846Z","iopub.execute_input":"2024-06-24T22:49:11.195408Z","iopub.status.idle":"2024-06-24T22:49:12.247582Z","shell.execute_reply.started":"2024-06-24T22:49:11.195363Z","shell.execute_reply":"2024-06-24T22:49:12.245756Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"#declare variables\nX = copy.drop('Target', axis=1)\ny = copy['Target']\n\n#split data\nX_train, X_test, y_train, y_test = train_test_split(X, y,shuffle=True)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T22:49:13.789312Z","iopub.execute_input":"2024-06-24T22:49:13.789791Z","iopub.status.idle":"2024-06-24T22:49:13.855963Z","shell.execute_reply.started":"2024-06-24T22:49:13.789754Z","shell.execute_reply":"2024-06-24T22:49:13.854620Z"},"trusted":true},"execution_count":6,"outputs":[]},{"cell_type":"code","source":"#get float columns to scale\nmy_columns = list(copy.select_dtypes(float).columns)\n\n\n#declare standard scalaer and column transformer\nscaler = StandardScaler()\nct = ColumnTransformer(transformers=[('scaler', scaler, my_columns)], remainder='passthrough')\n\npipeline = Pipeline(steps=[\n    ('transformer', ct),\n    ('model', LogisticRegression(solver='newton-cholesky', max_iter=1000))\n])\n\n#fit model\npipeline.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T18:39:36.582078Z","iopub.execute_input":"2024-06-24T18:39:36.582459Z","iopub.status.idle":"2024-06-24T18:39:37.224878Z","shell.execute_reply.started":"2024-06-24T18:39:36.582436Z","shell.execute_reply":"2024-06-24T18:39:37.224105Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('transformer',\n                 ColumnTransformer(remainder='passthrough',\n                                   transformers=[('scaler', StandardScaler(),\n                                                  ['Previous qualification '\n                                                   '(grade)',\n                                                   'Admission grade',\n                                                   'Curricular units 1st sem '\n                                                   '(grade)',\n                                                   'Curricular units 2nd sem '\n                                                   '(grade)',\n                                                   'Unemployment rate',\n                                                   'Inflation rate',\n                                                   'GDP'])])),\n                ('model',\n                 LogisticRegression(max_iter=1000, solver='newton-cholesky'))])","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;transformer&#x27;,\n                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                                   transformers=[(&#x27;scaler&#x27;, StandardScaler(),\n                                                  [&#x27;Previous qualification &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Admission grade&#x27;,\n                                                   &#x27;Curricular units 1st sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Curricular units 2nd sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Unemployment rate&#x27;,\n                                                   &#x27;Inflation rate&#x27;,\n                                                   &#x27;GDP&#x27;])])),\n                (&#x27;model&#x27;,\n                 LogisticRegression(max_iter=1000, solver=&#x27;newton-cholesky&#x27;))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;transformer&#x27;,\n                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                                   transformers=[(&#x27;scaler&#x27;, StandardScaler(),\n                                                  [&#x27;Previous qualification &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Admission grade&#x27;,\n                                                   &#x27;Curricular units 1st sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Curricular units 2nd sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Unemployment rate&#x27;,\n                                                   &#x27;Inflation rate&#x27;,\n                                                   &#x27;GDP&#x27;])])),\n                (&#x27;model&#x27;,\n                 LogisticRegression(max_iter=1000, solver=&#x27;newton-cholesky&#x27;))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">transformer: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                  transformers=[(&#x27;scaler&#x27;, StandardScaler(),\n                                 [&#x27;Previous qualification (grade)&#x27;,\n                                  &#x27;Admission grade&#x27;,\n                                  &#x27;Curricular units 1st sem (grade)&#x27;,\n                                  &#x27;Curricular units 2nd sem (grade)&#x27;,\n                                  &#x27;Unemployment rate&#x27;, &#x27;Inflation rate&#x27;,\n                                  &#x27;GDP&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">scaler</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Previous qualification (grade)&#x27;, &#x27;Admission grade&#x27;, &#x27;Curricular units 1st sem (grade)&#x27;, &#x27;Curricular units 2nd sem (grade)&#x27;, &#x27;Unemployment rate&#x27;, &#x27;Inflation rate&#x27;, &#x27;GDP&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">remainder</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Marital status&#x27;, &#x27;Application mode&#x27;, &#x27;Application order&#x27;, &#x27;Course&#x27;, &#x27;Daytime/evening attendance&#x27;, &#x27;Previous qualification&#x27;, &#x27;Nacionality&#x27;, &quot;Mother&#x27;s qualification&quot;, &quot;Father&#x27;s qualification&quot;, &quot;Mother&#x27;s occupation&quot;, &quot;Father&#x27;s occupation&quot;, &#x27;Displaced&#x27;, &#x27;Educational special needs&#x27;, &#x27;Debtor&#x27;, &#x27;Tuition fees up to date&#x27;, &#x27;Gender&#x27;, &#x27;Scholarship holder&#x27;, &#x27;Age at enrollment&#x27;, &#x27;International&#x27;, &#x27;Curricular units 1st sem (credited)&#x27;, &#x27;Curricular units 1st sem (enrolled)&#x27;, &#x27;Curricular units 1st sem (evaluations)&#x27;, &#x27;Curricular units 1st sem (approved)&#x27;, &#x27;Curricular units 1st sem (without evaluations)&#x27;, &#x27;Curricular units 2nd sem (credited)&#x27;, &#x27;Curricular units 2nd sem (enrolled)&#x27;, &#x27;Curricular units 2nd sem (evaluations)&#x27;, &#x27;Curricular units 2nd sem (approved)&#x27;, &#x27;Curricular units 2nd sem (without evaluations)&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000, solver=&#x27;newton-cholesky&#x27;)</pre></div></div></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"#get predictions\ntrain_pred = pipeline.predict(X_train) \ntest_pred = pipeline.predict(X_test)\n\n#get scores\ntrain_acc = accuracy_score(y_train, train_pred)\ntest_acc = accuracy_score(y_test, test_pred)\n\n#print scores\nprint(f'Train_score: {train_acc}')\nprint(f\"Test_score: {test_acc}\")","metadata":{"execution":{"iopub.status.busy":"2024-06-24T18:39:39.460155Z","iopub.execute_input":"2024-06-24T18:39:39.460512Z","iopub.status.idle":"2024-06-24T18:39:39.620491Z","shell.execute_reply.started":"2024-06-24T18:39:39.460488Z","shell.execute_reply":"2024-06-24T18:39:39.618828Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"Train_score: 0.81152854255245\nTest_score: 0.8086774699424987\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.feature_selection import SelectKBest, f_classif\n\nmy_model = LogisticRegression(solver='newton-cholesky', max_iter=1000)\n\nselector = SelectKBest(f_classif)\n\nnew = selector.fit_transform(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T18:39:52.196148Z","iopub.execute_input":"2024-06-24T18:39:52.196742Z","iopub.status.idle":"2024-06-24T18:39:52.326355Z","shell.execute_reply.started":"2024-06-24T18:39:52.196696Z","shell.execute_reply":"2024-06-24T18:39:52.325518Z"},"trusted":true},"execution_count":10,"outputs":[]},{"cell_type":"code","source":"\n\nfig = plt.figure(figsize=(16, 20))\nplt.barh(y=list(X_train.columns), width=selector.scores_)\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-06-17T04:45:24.608982Z","iopub.execute_input":"2024-06-17T04:45:24.610420Z","iopub.status.idle":"2024-06-17T04:45:25.314596Z","shell.execute_reply.started":"2024-06-17T04:45:24.610370Z","shell.execute_reply":"2024-06-17T04:45:25.313057Z"},"trusted":true},"execution_count":29,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 1600x2000 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"#get float columns to scale\nmy_columns = list(copy.select_dtypes(float).columns)\n\n\n#declare standard scalaer and column transformer\nscaler = StandardScaler()\nct = ColumnTransformer(transformers=[('scaler', scaler, my_columns)], remainder='passthrough')\n\npipeline = Pipeline(steps=[\n    ('transformer', ct),\n    ('selector', SelectKBest(f_classif, k=20)),\n    ('model', LogisticRegression(solver='newton-cholesky', max_iter=1000))\n])\n\n#fit model\npipeline.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T03:42:57.412030Z","iopub.execute_input":"2024-06-24T03:42:57.412465Z","iopub.status.idle":"2024-06-24T03:42:58.635430Z","shell.execute_reply.started":"2024-06-24T03:42:57.412431Z","shell.execute_reply":"2024-06-24T03:42:58.633882Z"},"trusted":true},"execution_count":36,"outputs":[{"execution_count":36,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('transformer',\n                 ColumnTransformer(remainder='passthrough',\n                                   transformers=[('scaler', StandardScaler(),\n                                                  ['Previous qualification '\n                                                   '(grade)',\n                                                   'Admission grade',\n                                                   'Curricular units 1st sem '\n                                                   '(grade)',\n                                                   'Curricular units 2nd sem '\n                                                   '(grade)',\n                                                   'Unemployment rate',\n                                                   'Inflation rate',\n                                                   'GDP'])])),\n                ('selector', SelectKBest(k=20)),\n                ('model',\n                 LogisticRegression(max_iter=1000, solver='newton-cholesky'))])","text/html":"<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;transformer&#x27;,\n                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                                   transformers=[(&#x27;scaler&#x27;, StandardScaler(),\n                                                  [&#x27;Previous qualification &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Admission grade&#x27;,\n                                                   &#x27;Curricular units 1st sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Curricular units 2nd sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Unemployment rate&#x27;,\n                                                   &#x27;Inflation rate&#x27;,\n                                                   &#x27;GDP&#x27;])])),\n                (&#x27;selector&#x27;, SelectKBest(k=20)),\n                (&#x27;model&#x27;,\n                 LogisticRegression(max_iter=1000, solver=&#x27;newton-cholesky&#x27;))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-37\" type=\"checkbox\" ><label for=\"sk-estimator-id-37\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;transformer&#x27;,\n                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                                   transformers=[(&#x27;scaler&#x27;, StandardScaler(),\n                                                  [&#x27;Previous qualification &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Admission grade&#x27;,\n                                                   &#x27;Curricular units 1st sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Curricular units 2nd sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Unemployment rate&#x27;,\n                                                   &#x27;Inflation rate&#x27;,\n                                                   &#x27;GDP&#x27;])])),\n                (&#x27;selector&#x27;, SelectKBest(k=20)),\n                (&#x27;model&#x27;,\n                 LogisticRegression(max_iter=1000, solver=&#x27;newton-cholesky&#x27;))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-38\" type=\"checkbox\" ><label for=\"sk-estimator-id-38\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">transformer: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                  transformers=[(&#x27;scaler&#x27;, StandardScaler(),\n                                 [&#x27;Previous qualification (grade)&#x27;,\n                                  &#x27;Admission grade&#x27;,\n                                  &#x27;Curricular units 1st sem (grade)&#x27;,\n                                  &#x27;Curricular units 2nd sem (grade)&#x27;,\n                                  &#x27;Unemployment rate&#x27;, &#x27;Inflation rate&#x27;,\n                                  &#x27;GDP&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-39\" type=\"checkbox\" ><label for=\"sk-estimator-id-39\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">scaler</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Previous qualification (grade)&#x27;, &#x27;Admission grade&#x27;, &#x27;Curricular units 1st sem (grade)&#x27;, &#x27;Curricular units 2nd sem (grade)&#x27;, &#x27;Unemployment rate&#x27;, &#x27;Inflation rate&#x27;, &#x27;GDP&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-40\" type=\"checkbox\" ><label for=\"sk-estimator-id-40\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-41\" type=\"checkbox\" ><label for=\"sk-estimator-id-41\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">remainder</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Marital status&#x27;, &#x27;Application mode&#x27;, &#x27;Application order&#x27;, &#x27;Course&#x27;, &#x27;Daytime/evening attendance&#x27;, &#x27;Previous qualification&#x27;, &#x27;Nacionality&#x27;, &quot;Mother&#x27;s qualification&quot;, &quot;Father&#x27;s qualification&quot;, &quot;Mother&#x27;s occupation&quot;, &quot;Father&#x27;s occupation&quot;, &#x27;Displaced&#x27;, &#x27;Educational special needs&#x27;, &#x27;Debtor&#x27;, &#x27;Tuition fees up to date&#x27;, &#x27;Gender&#x27;, &#x27;Scholarship holder&#x27;, &#x27;Age at enrollment&#x27;, &#x27;International&#x27;, &#x27;Curricular units 1st sem (credited)&#x27;, &#x27;Curricular units 1st sem (enrolled)&#x27;, &#x27;Curricular units 1st sem (evaluations)&#x27;, &#x27;Curricular units 1st sem (approved)&#x27;, &#x27;Curricular units 1st sem (without evaluations)&#x27;, &#x27;Curricular units 2nd sem (credited)&#x27;, &#x27;Curricular units 2nd sem (enrolled)&#x27;, &#x27;Curricular units 2nd sem (evaluations)&#x27;, &#x27;Curricular units 2nd sem (approved)&#x27;, &#x27;Curricular units 2nd sem (without evaluations)&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-42\" type=\"checkbox\" ><label for=\"sk-estimator-id-42\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-43\" type=\"checkbox\" ><label for=\"sk-estimator-id-43\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SelectKBest</label><div class=\"sk-toggleable__content\"><pre>SelectKBest(k=20)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-44\" type=\"checkbox\" ><label for=\"sk-estimator-id-44\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000, solver=&#x27;newton-cholesky&#x27;)</pre></div></div></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"#get predictions\ntrain_pred = pipeline.predict(X_train) \ntest_pred = pipeline.predict(X_test)\n\n#get scores\ntrain_acc = accuracy_score(y_train, train_pred)\ntest_acc = accuracy_score(y_test, test_pred)\n\n#print scores\nprint(f'Train_score: {train_acc}')\nprint(f\"Test_score: {test_acc}\")","metadata":{"execution":{"iopub.status.busy":"2024-06-24T03:43:01.337880Z","iopub.execute_input":"2024-06-24T03:43:01.338300Z","iopub.status.idle":"2024-06-24T03:43:01.639844Z","shell.execute_reply.started":"2024-06-24T03:43:01.338269Z","shell.execute_reply":"2024-06-24T03:43:01.638692Z"},"trusted":true},"execution_count":37,"outputs":[{"name":"stdout","text":"Train_score: 0.8097685927371576\nTest_score: 0.8119184526921066\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Might need to do some feature engineering to combine less important features...The more features that are included the more accurate the model is...","metadata":{}},{"cell_type":"markdown","source":"# Mutual information","metadata":{}},{"cell_type":"code","source":"# import mutual info regression and one hot encoder\nfrom sklearn.feature_selection import mutual_info_regression\n\n# encode target\ny_factorize = list(pd.factorize(y)[0])\n\n# declare discrete features\ndiscrete_features = X.dtypes == int","metadata":{"execution":{"iopub.status.busy":"2024-06-24T18:42:11.065131Z","iopub.execute_input":"2024-06-24T18:42:11.065497Z","iopub.status.idle":"2024-06-24T18:42:11.081229Z","shell.execute_reply.started":"2024-06-24T18:42:11.065476Z","shell.execute_reply":"2024-06-24T18:42:11.080393Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"# get scores\nmi_scores = mutual_info_regression(X, y_factorize, discrete_features=discrete_features)\nmi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\nmi_scores = mi_scores.sort_values(ascending=False)\n\n#print scores\nmi_scores","metadata":{"execution":{"iopub.status.busy":"2024-06-24T18:42:13.602223Z","iopub.execute_input":"2024-06-24T18:42:13.602564Z","iopub.status.idle":"2024-06-24T18:42:26.576954Z","shell.execute_reply.started":"2024-06-24T18:42:13.602539Z","shell.execute_reply":"2024-06-24T18:42:26.575991Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"Curricular units 2nd sem (approved)               0.480754\nCurricular units 2nd sem (grade)                  0.421309\nCurricular units 1st sem (approved)               0.405544\nCurricular units 1st sem (grade)                  0.365494\nCurricular units 2nd sem (evaluations)            0.197720\nCurricular units 1st sem (evaluations)            0.187947\nCourse                                            0.113832\nTuition fees up to date                           0.106206\nAdmission grade                                   0.105426\nAge at enrollment                                 0.097891\nScholarship holder                                0.092767\nPrevious qualification (grade)                    0.092610\nApplication mode                                  0.086517\nCurricular units 2nd sem (enrolled)               0.081387\nCurricular units 1st sem (enrolled)               0.077027\nGender                                            0.057025\nPrevious qualification                            0.037517\nDebtor                                            0.036530\nFather's qualification                            0.034184\nMother's qualification                            0.033685\nFather's occupation                               0.031979\nMother's occupation                               0.028209\nApplication order                                 0.016039\nGDP                                               0.015757\nUnemployment rate                                 0.015502\nDisplaced                                         0.014028\nMarital status                                    0.013723\nDaytime/evening attendance                        0.011168\nCurricular units 2nd sem (without evaluations)    0.009122\nCurricular units 1st sem (without evaluations)    0.008276\nCurricular units 1st sem (credited)               0.006579\nNacionality                                       0.005808\nInflation rate                                    0.005799\nCurricular units 2nd sem (credited)               0.005731\nEducational special needs                         0.004512\nInternational                                     0.004468\nName: MI Scores, dtype: float64"},"metadata":{}}]},{"cell_type":"markdown","source":"Let's rerun the model with scores >= 0.05","metadata":{}},{"cell_type":"code","source":"# get scores and features\nthresholds = mi_scores[mi_scores.values >= 0.05]\n#get feature names\nthreshold_features = list(thresholds.index)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T18:43:41.198308Z","iopub.execute_input":"2024-06-24T18:43:41.198641Z","iopub.status.idle":"2024-06-24T18:43:41.202812Z","shell.execute_reply.started":"2024-06-24T18:43:41.198619Z","shell.execute_reply":"2024-06-24T18:43:41.202008Z"},"trusted":true},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":"Rerun models","metadata":{}},{"cell_type":"code","source":" # import libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, FunctionTransformer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.feature_selection import SelectFromModel, mutual_info_regression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.pipeline import Pipeline\n","metadata":{"execution":{"iopub.status.busy":"2024-06-24T20:43:43.566037Z","iopub.execute_input":"2024-06-24T20:43:43.567221Z","iopub.status.idle":"2024-06-24T20:43:43.573120Z","shell.execute_reply.started":"2024-06-24T20:43:43.567176Z","shell.execute_reply":"2024-06-24T20:43:43.572050Z"},"trusted":true},"execution_count":63,"outputs":[]},{"cell_type":"code","source":"#declare variables\nX = copy.loc[:, threshold_features]\ny = copy['Target']\n\n#split data\nX_train, X_test, y_train, y_test = train_test_split(X, y,shuffle=True)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T18:43:47.678095Z","iopub.execute_input":"2024-06-24T18:43:47.678410Z","iopub.status.idle":"2024-06-24T18:43:47.696094Z","shell.execute_reply.started":"2024-06-24T18:43:47.678390Z","shell.execute_reply":"2024-06-24T18:43:47.695187Z"},"trusted":true},"execution_count":17,"outputs":[]},{"cell_type":"code","source":"X_train.columns","metadata":{"execution":{"iopub.status.busy":"2024-06-24T03:35:38.422320Z","iopub.execute_input":"2024-06-24T03:35:38.422740Z","iopub.status.idle":"2024-06-24T03:35:38.430710Z","shell.execute_reply.started":"2024-06-24T03:35:38.422704Z","shell.execute_reply":"2024-06-24T03:35:38.429454Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"Index(['Curricular units 2nd sem (approved)',\n       'Curricular units 2nd sem (grade)',\n       'Curricular units 1st sem (approved)',\n       'Curricular units 1st sem (grade)',\n       'Curricular units 2nd sem (evaluations)',\n       'Curricular units 1st sem (evaluations)', 'Course', 'Admission grade',\n       'Tuition fees up to date', 'Age at enrollment', 'Scholarship holder',\n       'Previous qualification (grade)', 'Application mode',\n       'Curricular units 2nd sem (enrolled)',\n       'Curricular units 1st sem (enrolled)', 'Gender'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"#get float columns to scale\nmy_columns = list(X_train.select_dtypes(float).columns)\n\n\n#declare standard scalaer and column transformer\nscaler = StandardScaler()\nct = ColumnTransformer(transformers=[('scaler', scaler, my_columns)], remainder='passthrough')\n\npipeline = Pipeline(steps=[\n    ('transformer', ct),\n    ('model', LogisticRegression(solver='newton-cholesky', max_iter=1000))\n])\n\n#fit model\npipeline.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T03:51:28.578920Z","iopub.execute_input":"2024-06-24T03:51:28.579362Z","iopub.status.idle":"2024-06-24T03:51:29.597083Z","shell.execute_reply.started":"2024-06-24T03:51:28.579324Z","shell.execute_reply":"2024-06-24T03:51:29.595921Z"},"trusted":true},"execution_count":44,"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('transformer',\n                 ColumnTransformer(remainder='passthrough',\n                                   transformers=[('scaler', StandardScaler(),\n                                                  ['Curricular units 2nd sem '\n                                                   '(grade)',\n                                                   'Curricular units 1st sem '\n                                                   '(grade)',\n                                                   'Admission grade',\n                                                   'Previous qualification '\n                                                   '(grade)'])])),\n                ('model',\n                 LogisticRegression(max_iter=1000, solver='newton-cholesky'))])","text/html":"<style>#sk-container-id-8 {color: black;background-color: white;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;transformer&#x27;,\n                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                                   transformers=[(&#x27;scaler&#x27;, StandardScaler(),\n                                                  [&#x27;Curricular units 2nd sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Curricular units 1st sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Admission grade&#x27;,\n                                                   &#x27;Previous qualification &#x27;\n                                                   &#x27;(grade)&#x27;])])),\n                (&#x27;model&#x27;,\n                 LogisticRegression(max_iter=1000, solver=&#x27;newton-cholesky&#x27;))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-52\" type=\"checkbox\" ><label for=\"sk-estimator-id-52\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;transformer&#x27;,\n                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                                   transformers=[(&#x27;scaler&#x27;, StandardScaler(),\n                                                  [&#x27;Curricular units 2nd sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Curricular units 1st sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Admission grade&#x27;,\n                                                   &#x27;Previous qualification &#x27;\n                                                   &#x27;(grade)&#x27;])])),\n                (&#x27;model&#x27;,\n                 LogisticRegression(max_iter=1000, solver=&#x27;newton-cholesky&#x27;))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-53\" type=\"checkbox\" ><label for=\"sk-estimator-id-53\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">transformer: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                  transformers=[(&#x27;scaler&#x27;, StandardScaler(),\n                                 [&#x27;Curricular units 2nd sem (grade)&#x27;,\n                                  &#x27;Curricular units 1st sem (grade)&#x27;,\n                                  &#x27;Admission grade&#x27;,\n                                  &#x27;Previous qualification (grade)&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-54\" type=\"checkbox\" ><label for=\"sk-estimator-id-54\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">scaler</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Curricular units 2nd sem (grade)&#x27;, &#x27;Curricular units 1st sem (grade)&#x27;, &#x27;Admission grade&#x27;, &#x27;Previous qualification (grade)&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-55\" type=\"checkbox\" ><label for=\"sk-estimator-id-55\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-56\" type=\"checkbox\" ><label for=\"sk-estimator-id-56\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">remainder</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Curricular units 2nd sem (approved)&#x27;, &#x27;Curricular units 1st sem (approved)&#x27;, &#x27;Curricular units 2nd sem (evaluations)&#x27;, &#x27;Curricular units 1st sem (evaluations)&#x27;, &#x27;Course&#x27;, &#x27;Tuition fees up to date&#x27;, &#x27;Age at enrollment&#x27;, &#x27;Scholarship holder&#x27;, &#x27;Application mode&#x27;, &#x27;Curricular units 2nd sem (enrolled)&#x27;, &#x27;Curricular units 1st sem (enrolled)&#x27;, &#x27;Gender&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-57\" type=\"checkbox\" ><label for=\"sk-estimator-id-57\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-58\" type=\"checkbox\" ><label for=\"sk-estimator-id-58\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000, solver=&#x27;newton-cholesky&#x27;)</pre></div></div></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"#get predictions\ntrain_pred = pipeline.predict(X_train) \ntest_pred = pipeline.predict(X_test)\n\n#get scores\ntrain_acc = accuracy_score(y_train, train_pred)\ntest_acc = accuracy_score(y_test, test_pred)\n\n#print scores\nprint(f'Train_score: {train_acc}')\nprint(f\"Test_score: {test_acc}\")","metadata":{"execution":{"iopub.status.busy":"2024-06-24T03:51:31.663063Z","iopub.execute_input":"2024-06-24T03:51:31.663451Z","iopub.status.idle":"2024-06-24T03:51:31.947501Z","shell.execute_reply.started":"2024-06-24T03:51:31.663422Z","shell.execute_reply":"2024-06-24T03:51:31.946288Z"},"trusted":true},"execution_count":45,"outputs":[{"name":"stdout","text":"Train_score: 0.8078866662019935\nTest_score: 0.8129639309984318\n","output_type":"stream"}]},{"cell_type":"markdown","source":"let's add in Logtransform on the floats dtypes","metadata":{}},{"cell_type":"code","source":"#get float columns to scale\nmy_columns = list(X_train.select_dtypes(float).columns)\n\n\n#declare standard scalaer and column transformer\n\nscaler = StandardScaler()\nlogger = FunctionTransformer(np.log1p)\nct = ColumnTransformer(transformers=[('scaler', scaler, my_columns),\n                                    ('log transform', logger, my_columns)], \n                       remainder='passthrough')\n\n# Create the SelectFromModel instance using mutual_info_regression\nfeat_sel = SelectFromModel(estimator=mutual_info_regression, threshold=0.05)\n\n#make pipeline\npipeline = Pipeline(steps=[\n    ('transformer', ct),\n    ('selection', feat_sel),\n    ('model', LogisticRegression(solver='newton-cholesky', max_iter=1000))\n])\n\n#fit model\npipeline.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-06-24T04:06:02.884896Z","iopub.execute_input":"2024-06-24T04:06:02.885298Z","iopub.status.idle":"2024-06-24T04:06:03.942402Z","shell.execute_reply.started":"2024-06-24T04:06:02.885267Z","shell.execute_reply":"2024-06-24T04:06:03.940864Z"},"trusted":true},"execution_count":53,"outputs":[{"execution_count":53,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('transformer',\n                 ColumnTransformer(remainder='passthrough',\n                                   transformers=[('scaler', StandardScaler(),\n                                                  ['Curricular units 2nd sem '\n                                                   '(grade)',\n                                                   'Curricular units 1st sem '\n                                                   '(grade)',\n                                                   'Admission grade',\n                                                   'Previous qualification '\n                                                   '(grade)']),\n                                                 ('log transform',\n                                                  FunctionTransformer(func=<ufunc 'log1p'>),\n                                                  ['Curricular units 2nd sem '\n                                                   '(grade)',\n                                                   'Curricular units 1st sem '\n                                                   '(grade)',\n                                                   'Admission grade',\n                                                   'Previous qualification '\n                                                   '(grade)'])])),\n                ('model',\n                 LogisticRegression(max_iter=1000, solver='newton-cholesky'))])","text/html":"<style>#sk-container-id-11 {color: black;background-color: white;}#sk-container-id-11 pre{padding: 0;}#sk-container-id-11 div.sk-toggleable {background-color: white;}#sk-container-id-11 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-11 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-11 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-11 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-11 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-11 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-11 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-11 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-11 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-11 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-11 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-11 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-11 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-11 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-11 div.sk-item {position: relative;z-index: 1;}#sk-container-id-11 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-11 div.sk-item::before, #sk-container-id-11 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-11 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-11 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-11 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-11 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-11 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-11 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-11 div.sk-label-container {text-align: center;}#sk-container-id-11 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-11 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-11\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;transformer&#x27;,\n                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                                   transformers=[(&#x27;scaler&#x27;, StandardScaler(),\n                                                  [&#x27;Curricular units 2nd sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Curricular units 1st sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Admission grade&#x27;,\n                                                   &#x27;Previous qualification &#x27;\n                                                   &#x27;(grade)&#x27;]),\n                                                 (&#x27;log transform&#x27;,\n                                                  FunctionTransformer(func=&lt;ufunc &#x27;log1p&#x27;&gt;),\n                                                  [&#x27;Curricular units 2nd sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Curricular units 1st sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Admission grade&#x27;,\n                                                   &#x27;Previous qualification &#x27;\n                                                   &#x27;(grade)&#x27;])])),\n                (&#x27;model&#x27;,\n                 LogisticRegression(max_iter=1000, solver=&#x27;newton-cholesky&#x27;))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-77\" type=\"checkbox\" ><label for=\"sk-estimator-id-77\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;transformer&#x27;,\n                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                                   transformers=[(&#x27;scaler&#x27;, StandardScaler(),\n                                                  [&#x27;Curricular units 2nd sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Curricular units 1st sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Admission grade&#x27;,\n                                                   &#x27;Previous qualification &#x27;\n                                                   &#x27;(grade)&#x27;]),\n                                                 (&#x27;log transform&#x27;,\n                                                  FunctionTransformer(func=&lt;ufunc &#x27;log1p&#x27;&gt;),\n                                                  [&#x27;Curricular units 2nd sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Curricular units 1st sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Admission grade&#x27;,\n                                                   &#x27;Previous qualification &#x27;\n                                                   &#x27;(grade)&#x27;])])),\n                (&#x27;model&#x27;,\n                 LogisticRegression(max_iter=1000, solver=&#x27;newton-cholesky&#x27;))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-78\" type=\"checkbox\" ><label for=\"sk-estimator-id-78\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">transformer: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                  transformers=[(&#x27;scaler&#x27;, StandardScaler(),\n                                 [&#x27;Curricular units 2nd sem (grade)&#x27;,\n                                  &#x27;Curricular units 1st sem (grade)&#x27;,\n                                  &#x27;Admission grade&#x27;,\n                                  &#x27;Previous qualification (grade)&#x27;]),\n                                (&#x27;log transform&#x27;,\n                                 FunctionTransformer(func=&lt;ufunc &#x27;log1p&#x27;&gt;),\n                                 [&#x27;Curricular units 2nd sem (grade)&#x27;,\n                                  &#x27;Curricular units 1st sem (grade)&#x27;,\n                                  &#x27;Admission grade&#x27;,\n                                  &#x27;Previous qualification (grade)&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-79\" type=\"checkbox\" ><label for=\"sk-estimator-id-79\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">scaler</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Curricular units 2nd sem (grade)&#x27;, &#x27;Curricular units 1st sem (grade)&#x27;, &#x27;Admission grade&#x27;, &#x27;Previous qualification (grade)&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-80\" type=\"checkbox\" ><label for=\"sk-estimator-id-80\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-81\" type=\"checkbox\" ><label for=\"sk-estimator-id-81\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">log transform</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Curricular units 2nd sem (grade)&#x27;, &#x27;Curricular units 1st sem (grade)&#x27;, &#x27;Admission grade&#x27;, &#x27;Previous qualification (grade)&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-82\" type=\"checkbox\" ><label for=\"sk-estimator-id-82\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">FunctionTransformer</label><div class=\"sk-toggleable__content\"><pre>FunctionTransformer(func=&lt;ufunc &#x27;log1p&#x27;&gt;)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-83\" type=\"checkbox\" ><label for=\"sk-estimator-id-83\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">remainder</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Curricular units 2nd sem (approved)&#x27;, &#x27;Curricular units 1st sem (approved)&#x27;, &#x27;Curricular units 2nd sem (evaluations)&#x27;, &#x27;Curricular units 1st sem (evaluations)&#x27;, &#x27;Course&#x27;, &#x27;Tuition fees up to date&#x27;, &#x27;Age at enrollment&#x27;, &#x27;Scholarship holder&#x27;, &#x27;Application mode&#x27;, &#x27;Curricular units 2nd sem (enrolled)&#x27;, &#x27;Curricular units 1st sem (enrolled)&#x27;, &#x27;Gender&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-84\" type=\"checkbox\" ><label for=\"sk-estimator-id-84\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-85\" type=\"checkbox\" ><label for=\"sk-estimator-id-85\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000, solver=&#x27;newton-cholesky&#x27;)</pre></div></div></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"#get predictions\ntrain_pred = pipeline.predict(X_train) \ntest_pred = pipeline.predict(X_test)\n\n#get scores\ntrain_acc = accuracy_score(y_train, train_pred)\ntest_acc = accuracy_score(y_test, test_pred)\n\n#print scores\nprint(f'Train_score: {train_acc}')\nprint(f\"Test_score: {test_acc}\")","metadata":{"execution":{"iopub.status.busy":"2024-06-24T04:06:12.420318Z","iopub.execute_input":"2024-06-24T04:06:12.420726Z","iopub.status.idle":"2024-06-24T04:06:12.715134Z","shell.execute_reply.started":"2024-06-24T04:06:12.420688Z","shell.execute_reply":"2024-06-24T04:06:12.713742Z"},"trusted":true},"execution_count":55,"outputs":[{"name":"stdout","text":"Train_score: 0.8121732766432007\nTest_score: 0.815054887611082\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# get results","metadata":{}},{"cell_type":"code","source":" # import libraries\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler, FunctionTransformer\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.feature_selection import SelectFromModel, mutual_info_regression\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.pipeline import Pipeline\n","metadata":{"execution":{"iopub.status.busy":"2024-06-25T17:29:44.294348Z","iopub.execute_input":"2024-06-25T17:29:44.294751Z","iopub.status.idle":"2024-06-25T17:29:45.111342Z","shell.execute_reply.started":"2024-06-25T17:29:44.294719Z","shell.execute_reply":"2024-06-25T17:29:45.110037Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"#get test data \ntest_data = pd.read_csv('/kaggle/input/playground-series-s4e6/test.csv')\n\n# get train data\ntrain_data = pd.read_csv('/kaggle/input/playground-series-s4e6/train.csv')\n\n# check\ntest_data.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-25T18:32:52.621459Z","iopub.execute_input":"2024-06-25T18:32:52.622442Z","iopub.status.idle":"2024-06-25T18:32:53.154522Z","shell.execute_reply.started":"2024-06-25T18:32:52.622404Z","shell.execute_reply":"2024-06-25T18:32:53.153445Z"},"trusted":true},"execution_count":35,"outputs":[{"execution_count":35,"output_type":"execute_result","data":{"text/plain":"      id  Marital status  Application mode  Application order  Course  \\\n0  76518               1                 1                  1    9500   \n1  76519               1                 1                  1    9238   \n2  76520               1                 1                  1    9238   \n3  76521               1                44                  1    9147   \n4  76522               1                39                  1    9670   \n\n   Daytime/evening attendance  Previous qualification  \\\n0                           1                       1   \n1                           1                       1   \n2                           1                       1   \n3                           1                      39   \n4                           1                       1   \n\n   Previous qualification (grade)  Nacionality  Mother's qualification  ...  \\\n0                           141.0            1                       3  ...   \n1                           128.0            1                       1  ...   \n2                           118.0            1                       1  ...   \n3                           130.0            1                       1  ...   \n4                           110.0            1                       1  ...   \n\n   Curricular units 1st sem (without evaluations)  \\\n0                                               0   \n1                                               0   \n2                                               0   \n3                                               0   \n4                                               0   \n\n   Curricular units 2nd sem (credited)  Curricular units 2nd sem (enrolled)  \\\n0                                    0                                    8   \n1                                    0                                    6   \n2                                    0                                    6   \n3                                    3                                    8   \n4                                    0                                    6   \n\n   Curricular units 2nd sem (evaluations)  \\\n0                                       0   \n1                                       6   \n2                                      11   \n3                                      14   \n4                                       9   \n\n   Curricular units 2nd sem (approved)  Curricular units 2nd sem (grade)  \\\n0                                    0                          0.000000   \n1                                    6                         13.500000   \n2                                    5                         11.000000   \n3                                    5                         11.000000   \n4                                    4                         10.666667   \n\n   Curricular units 2nd sem (without evaluations)  Unemployment rate  \\\n0                                               0               13.9   \n1                                               0               11.1   \n2                                               0               15.5   \n3                                               0                8.9   \n4                                               2                7.6   \n\n   Inflation rate   GDP  \n0            -0.3  0.79  \n1             0.6  2.02  \n2             2.8 -4.06  \n3             1.4  3.51  \n4             2.6  0.32  \n\n[5 rows x 37 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Marital status</th>\n      <th>Application mode</th>\n      <th>Application order</th>\n      <th>Course</th>\n      <th>Daytime/evening attendance</th>\n      <th>Previous qualification</th>\n      <th>Previous qualification (grade)</th>\n      <th>Nacionality</th>\n      <th>Mother's qualification</th>\n      <th>...</th>\n      <th>Curricular units 1st sem (without evaluations)</th>\n      <th>Curricular units 2nd sem (credited)</th>\n      <th>Curricular units 2nd sem (enrolled)</th>\n      <th>Curricular units 2nd sem (evaluations)</th>\n      <th>Curricular units 2nd sem (approved)</th>\n      <th>Curricular units 2nd sem (grade)</th>\n      <th>Curricular units 2nd sem (without evaluations)</th>\n      <th>Unemployment rate</th>\n      <th>Inflation rate</th>\n      <th>GDP</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>76518</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>9500</td>\n      <td>1</td>\n      <td>1</td>\n      <td>141.0</td>\n      <td>1</td>\n      <td>3</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>8</td>\n      <td>0</td>\n      <td>0</td>\n      <td>0.000000</td>\n      <td>0</td>\n      <td>13.9</td>\n      <td>-0.3</td>\n      <td>0.79</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>76519</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>9238</td>\n      <td>1</td>\n      <td>1</td>\n      <td>128.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>6</td>\n      <td>6</td>\n      <td>13.500000</td>\n      <td>0</td>\n      <td>11.1</td>\n      <td>0.6</td>\n      <td>2.02</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>76520</td>\n      <td>1</td>\n      <td>1</td>\n      <td>1</td>\n      <td>9238</td>\n      <td>1</td>\n      <td>1</td>\n      <td>118.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>11</td>\n      <td>5</td>\n      <td>11.000000</td>\n      <td>0</td>\n      <td>15.5</td>\n      <td>2.8</td>\n      <td>-4.06</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>76521</td>\n      <td>1</td>\n      <td>44</td>\n      <td>1</td>\n      <td>9147</td>\n      <td>1</td>\n      <td>39</td>\n      <td>130.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>3</td>\n      <td>8</td>\n      <td>14</td>\n      <td>5</td>\n      <td>11.000000</td>\n      <td>0</td>\n      <td>8.9</td>\n      <td>1.4</td>\n      <td>3.51</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>76522</td>\n      <td>1</td>\n      <td>39</td>\n      <td>1</td>\n      <td>9670</td>\n      <td>1</td>\n      <td>1</td>\n      <td>110.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>6</td>\n      <td>9</td>\n      <td>4</td>\n      <td>10.666667</td>\n      <td>2</td>\n      <td>7.6</td>\n      <td>2.6</td>\n      <td>0.32</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows Ã— 37 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":" #declare variables\nX = train_data.drop(['id', 'Target'], axis=1)\ny = train_data['Target']\n\n\ntesting = test_data.drop('id', axis=1)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T18:32:55.570419Z","iopub.execute_input":"2024-06-25T18:32:55.571348Z","iopub.status.idle":"2024-06-25T18:32:55.586861Z","shell.execute_reply.started":"2024-06-25T18:32:55.571312Z","shell.execute_reply":"2024-06-25T18:32:55.585854Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"# import mutual info regression and one hot encoder\nfrom sklearn.feature_selection import mutual_info_regression\n\n# encode target\ny_factorize = list(pd.factorize(y)[0])\n\n# declare discrete features\ndiscrete_features = X.dtypes == int","metadata":{"execution":{"iopub.status.busy":"2024-06-25T18:22:54.976504Z","iopub.execute_input":"2024-06-25T18:22:54.976900Z","iopub.status.idle":"2024-06-25T18:22:54.999963Z","shell.execute_reply.started":"2024-06-25T18:22:54.976869Z","shell.execute_reply":"2024-06-25T18:22:54.998802Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"# get scores\nmi_scores = mutual_info_regression(X, y_factorize, discrete_features=discrete_features)\nmi_scores = pd.Series(mi_scores, name=\"MI Scores\", index=X.columns)\nmi_scores = mi_scores.sort_values(ascending=False)\n\n#print scores\nmi_scores","metadata":{"execution":{"iopub.status.busy":"2024-06-25T18:22:58.694512Z","iopub.execute_input":"2024-06-25T18:22:58.694887Z","iopub.status.idle":"2024-06-25T18:23:16.344476Z","shell.execute_reply.started":"2024-06-25T18:22:58.694860Z","shell.execute_reply":"2024-06-25T18:23:16.343377Z"},"trusted":true},"execution_count":25,"outputs":[{"execution_count":25,"output_type":"execute_result","data":{"text/plain":"Curricular units 2nd sem (approved)               0.480935\nCurricular units 2nd sem (grade)                  0.410600\nCurricular units 1st sem (approved)               0.405654\nCurricular units 1st sem (grade)                  0.361130\nCurricular units 2nd sem (evaluations)            0.198790\nCurricular units 1st sem (evaluations)            0.192622\nCourse                                            0.115386\nTuition fees up to date                           0.106776\nAdmission grade                                   0.103833\nAge at enrollment                                 0.096745\nScholarship holder                                0.093435\nPrevious qualification (grade)                    0.086423\nApplication mode                                  0.083671\nCurricular units 2nd sem (enrolled)               0.081518\nCurricular units 1st sem (enrolled)               0.078917\nGender                                            0.058774\nPrevious qualification                            0.037239\nDebtor                                            0.034814\nFather's occupation                               0.030763\nFather's qualification                            0.030396\nMother's qualification                            0.027846\nMother's occupation                               0.027106\nGDP                                               0.017413\nUnemployment rate                                 0.016003\nApplication order                                 0.015267\nMarital status                                    0.015073\nDaytime/evening attendance                        0.012360\nDisplaced                                         0.011343\nInflation rate                                    0.010329\nCurricular units 2nd sem (without evaluations)    0.009900\nCurricular units 1st sem (without evaluations)    0.008726\nCurricular units 1st sem (credited)               0.005829\nCurricular units 2nd sem (credited)               0.005817\nNacionality                                       0.005628\nInternational                                     0.005028\nEducational special needs                         0.004628\nName: MI Scores, dtype: float64"},"metadata":{}}]},{"cell_type":"code","source":"# get scores and features\nthresholds = mi_scores[mi_scores.values >= 0.05]\n#get feature names\nthreshold_features = list(thresholds.index)\n\n\n#redeclare variables\nX = X[threshold_features]\ntesting = testing[threshold_features]","metadata":{"execution":{"iopub.status.busy":"2024-06-25T18:25:18.310678Z","iopub.execute_input":"2024-06-25T18:25:18.311097Z","iopub.status.idle":"2024-06-25T18:25:18.322114Z","shell.execute_reply.started":"2024-06-25T18:25:18.311066Z","shell.execute_reply":"2024-06-25T18:25:18.320887Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"#split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=True, stratify=y)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T18:26:16.433427Z","iopub.execute_input":"2024-06-25T18:26:16.433828Z","iopub.status.idle":"2024-06-25T18:26:16.587666Z","shell.execute_reply.started":"2024-06-25T18:26:16.433797Z","shell.execute_reply":"2024-06-25T18:26:16.586239Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"#get float columns to scale\nmy_columns = list(X.select_dtypes(float).columns)\n\n\n#declare standard scalaer and column transformer\n\nscaler = StandardScaler()\nlogger = FunctionTransformer(np.log1p)\nct = ColumnTransformer(transformers=[('scaler', scaler, my_columns),\n                                    ('log transform', logger, my_columns)], \n                       remainder='passthrough')\n\n#make pipeline\npipeline = Pipeline(steps=[\n    ('transformer', ct),\n    ('model', LogisticRegression(solver='newton-cholesky', max_iter=1000))\n])\n\n#fit model\npipeline.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T18:26:27.246190Z","iopub.execute_input":"2024-06-25T18:26:27.246601Z","iopub.status.idle":"2024-06-25T18:26:28.538116Z","shell.execute_reply.started":"2024-06-25T18:26:27.246568Z","shell.execute_reply":"2024-06-25T18:26:28.536585Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"Pipeline(steps=[('transformer',\n                 ColumnTransformer(remainder='passthrough',\n                                   transformers=[('scaler', StandardScaler(),\n                                                  ['Curricular units 2nd sem '\n                                                   '(grade)',\n                                                   'Curricular units 1st sem '\n                                                   '(grade)',\n                                                   'Admission grade',\n                                                   'Previous qualification '\n                                                   '(grade)']),\n                                                 ('log transform',\n                                                  FunctionTransformer(func=<ufunc 'log1p'>),\n                                                  ['Curricular units 2nd sem '\n                                                   '(grade)',\n                                                   'Curricular units 1st sem '\n                                                   '(grade)',\n                                                   'Admission grade',\n                                                   'Previous qualification '\n                                                   '(grade)'])])),\n                ('model',\n                 LogisticRegression(max_iter=1000, solver='newton-cholesky'))])","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;transformer&#x27;,\n                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                                   transformers=[(&#x27;scaler&#x27;, StandardScaler(),\n                                                  [&#x27;Curricular units 2nd sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Curricular units 1st sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Admission grade&#x27;,\n                                                   &#x27;Previous qualification &#x27;\n                                                   &#x27;(grade)&#x27;]),\n                                                 (&#x27;log transform&#x27;,\n                                                  FunctionTransformer(func=&lt;ufunc &#x27;log1p&#x27;&gt;),\n                                                  [&#x27;Curricular units 2nd sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Curricular units 1st sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Admission grade&#x27;,\n                                                   &#x27;Previous qualification &#x27;\n                                                   &#x27;(grade)&#x27;])])),\n                (&#x27;model&#x27;,\n                 LogisticRegression(max_iter=1000, solver=&#x27;newton-cholesky&#x27;))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">Pipeline</label><div class=\"sk-toggleable__content\"><pre>Pipeline(steps=[(&#x27;transformer&#x27;,\n                 ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                                   transformers=[(&#x27;scaler&#x27;, StandardScaler(),\n                                                  [&#x27;Curricular units 2nd sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Curricular units 1st sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Admission grade&#x27;,\n                                                   &#x27;Previous qualification &#x27;\n                                                   &#x27;(grade)&#x27;]),\n                                                 (&#x27;log transform&#x27;,\n                                                  FunctionTransformer(func=&lt;ufunc &#x27;log1p&#x27;&gt;),\n                                                  [&#x27;Curricular units 2nd sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Curricular units 1st sem &#x27;\n                                                   &#x27;(grade)&#x27;,\n                                                   &#x27;Admission grade&#x27;,\n                                                   &#x27;Previous qualification &#x27;\n                                                   &#x27;(grade)&#x27;])])),\n                (&#x27;model&#x27;,\n                 LogisticRegression(max_iter=1000, solver=&#x27;newton-cholesky&#x27;))])</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">transformer: ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(remainder=&#x27;passthrough&#x27;,\n                  transformers=[(&#x27;scaler&#x27;, StandardScaler(),\n                                 [&#x27;Curricular units 2nd sem (grade)&#x27;,\n                                  &#x27;Curricular units 1st sem (grade)&#x27;,\n                                  &#x27;Admission grade&#x27;,\n                                  &#x27;Previous qualification (grade)&#x27;]),\n                                (&#x27;log transform&#x27;,\n                                 FunctionTransformer(func=&lt;ufunc &#x27;log1p&#x27;&gt;),\n                                 [&#x27;Curricular units 2nd sem (grade)&#x27;,\n                                  &#x27;Curricular units 1st sem (grade)&#x27;,\n                                  &#x27;Admission grade&#x27;,\n                                  &#x27;Previous qualification (grade)&#x27;])])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">scaler</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Curricular units 2nd sem (grade)&#x27;, &#x27;Curricular units 1st sem (grade)&#x27;, &#x27;Admission grade&#x27;, &#x27;Previous qualification (grade)&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">log transform</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Curricular units 2nd sem (grade)&#x27;, &#x27;Curricular units 1st sem (grade)&#x27;, &#x27;Admission grade&#x27;, &#x27;Previous qualification (grade)&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">FunctionTransformer</label><div class=\"sk-toggleable__content\"><pre>FunctionTransformer(func=&lt;ufunc &#x27;log1p&#x27;&gt;)</pre></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">remainder</label><div class=\"sk-toggleable__content\"><pre>[&#x27;Curricular units 2nd sem (approved)&#x27;, &#x27;Curricular units 1st sem (approved)&#x27;, &#x27;Curricular units 2nd sem (evaluations)&#x27;, &#x27;Curricular units 1st sem (evaluations)&#x27;, &#x27;Course&#x27;, &#x27;Tuition fees up to date&#x27;, &#x27;Age at enrollment&#x27;, &#x27;Scholarship holder&#x27;, &#x27;Application mode&#x27;, &#x27;Curricular units 2nd sem (enrolled)&#x27;, &#x27;Curricular units 1st sem (enrolled)&#x27;, &#x27;Gender&#x27;]</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">passthrough</label><div class=\"sk-toggleable__content\"><pre>passthrough</pre></div></div></div></div></div></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=1000, solver=&#x27;newton-cholesky&#x27;)</pre></div></div></div></div></div></div></div>"},"metadata":{}}]},{"cell_type":"code","source":"#get predictions\ntrain_pred = pipeline.predict(X_train) \ntest_pred = pipeline.predict(X_test)\n\n#get scores\ntrain_acc = accuracy_score(y_train, train_pred)\ntest_acc = accuracy_score(y_test, test_pred)\n\n#print scores\nprint(f'Train_score: {train_acc}')\nprint(f\"Test_score: {test_acc}\")","metadata":{"execution":{"iopub.status.busy":"2024-06-25T18:27:11.585423Z","iopub.execute_input":"2024-06-25T18:27:11.585822Z","iopub.status.idle":"2024-06-25T18:27:11.899199Z","shell.execute_reply.started":"2024-06-25T18:27:11.585793Z","shell.execute_reply":"2024-06-25T18:27:11.898030Z"},"trusted":true},"execution_count":30,"outputs":[{"name":"stdout","text":"Train_score: 0.8123468487600876\nTest_score: 0.8108337689492943\n","output_type":"stream"}]},{"cell_type":"code","source":"#get predictons\nmy_predictions = pipeline.predict(testing)\n\n#set up submission file\nmy_submission = pd.DataFrame({\n    'id': test_data['id'].values,\n    'Target': my_predictions\n})\n\nmy_submission.to_csv('submission.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-06-25T18:44:03.692481Z","iopub.execute_input":"2024-06-25T18:44:03.692930Z","iopub.status.idle":"2024-06-25T18:44:03.865072Z","shell.execute_reply.started":"2024-06-25T18:44:03.692896Z","shell.execute_reply":"2024-06-25T18:44:03.863857Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"my_submission","metadata":{"execution":{"iopub.status.busy":"2024-06-25T18:50:03.406114Z","iopub.execute_input":"2024-06-25T18:50:03.407370Z","iopub.status.idle":"2024-06-25T18:50:03.421245Z","shell.execute_reply.started":"2024-06-25T18:50:03.407328Z","shell.execute_reply":"2024-06-25T18:50:03.419938Z"},"trusted":true},"execution_count":44,"outputs":[{"execution_count":44,"output_type":"execute_result","data":{"text/plain":"           id    Target\n0       76518   Dropout\n1       76519  Graduate\n2       76520  Graduate\n3       76521  Enrolled\n4       76522  Enrolled\n...       ...       ...\n51007  127525   Dropout\n51008  127526   Dropout\n51009  127527   Dropout\n51010  127528   Dropout\n51011  127529   Dropout\n\n[51012 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>Target</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>76518</td>\n      <td>Dropout</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>76519</td>\n      <td>Graduate</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>76520</td>\n      <td>Graduate</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>76521</td>\n      <td>Enrolled</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>76522</td>\n      <td>Enrolled</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>51007</th>\n      <td>127525</td>\n      <td>Dropout</td>\n    </tr>\n    <tr>\n      <th>51008</th>\n      <td>127526</td>\n      <td>Dropout</td>\n    </tr>\n    <tr>\n      <th>51009</th>\n      <td>127527</td>\n      <td>Dropout</td>\n    </tr>\n    <tr>\n      <th>51010</th>\n      <td>127528</td>\n      <td>Dropout</td>\n    </tr>\n    <tr>\n      <th>51011</th>\n      <td>127529</td>\n      <td>Dropout</td>\n    </tr>\n  </tbody>\n</table>\n<p>51012 rows Ã— 2 columns</p>\n</div>"},"metadata":{}}]}]}